---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  EnvPrefix:
    Type: String
    Default: ""
  CertificateArn:
    Type: String
  HostedZoneName:
    Type: String
  OpenApiFileKey:
    Type: String

Conditions:
  Nonprod: !Not [ !Equals [ !Ref EnvPrefix, "" ] ]
  Prod: !Equals [ !Ref EnvPrefix, "" ]

Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      BodyS3Location:
        Bucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
        Key: !Ref OpenApiFileKey

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref ApiGateway
      AutoDeploy: true

  ApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}"
        - !Sub api.${HostedZoneName}
      DomainNameConfigurations:
        - EndpointType: Regional
          CertificateArn: !Ref CertificateArn
          CertificateName: apiCert

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}"
        - !Sub api.${HostedZoneName}
      ApiId: !Ref ApiGateway
      Stage: !Ref ApiStage

  # ApiDomainName:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     DomainName: !If
  #       - Nonprod
  #       - !Sub "${EnvPrefix}-api.${HostedZoneName}"
  #       - !Sub api.${HostedZoneName}
  #     RegionalCertificateArn: !Ref CertificateArn
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL
  
  ApiR53Entry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}."
        - !Sub api.${HostedZoneName}.
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
  

  DiscordInteractionsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue
          'Fn::Sub': "tehBot-${EnvPrefix}WebhookLambdaArn"
      Principal: apigateway.amazonaws.com


  ApiGatewayLoggingRole:
    Condition: Prod
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayCloudwatchLogsAccount:
    Condition: Prod
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayLoggingRole
        - Arn