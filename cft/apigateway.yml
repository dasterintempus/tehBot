---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  EnvPrefix:
    Type: String
    Default: ""
  CertificateArn:
    Type: String
  HostedZoneName:
    Type: String
  LambdaVersion:
    Type: String
  RootDiscordUserId:
    Type: String

Conditions:
  Nonprod: !Not [ !Equals [ !Ref EnvPrefix, "" ] ]
  Prod: !Equals [ !Ref EnvPrefix, "" ]

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "tehbot-${EnvPrefix}ApiGateway"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}"
        - !Sub api.${HostedZoneName}
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  ApiR53Entry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}."
        - !Sub api.${HostedZoneName}.
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId

  # ApiDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     StageName: live
  #   DependsOn: DiscordInteractionsMethod

  # ApiBaseNameMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     BasePath: "tehbot"
  #     DomainName: !Ref ApiDomainName
  #     RestApiId: !Ref ApiGateway
  #     Stage: live
  #   DependsOn:
  #     - ApiDeployment
  #     - ApiR53Entry

  CronLambdaTokenCleanupSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "ScheduleRule for token_cleanup (${EnvPrefix})"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets: 
        - Arn: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}CronLambdaArn"
          Id: "token_cleanup"
          Input: |
            {
              "op": "token_cleanup"
            }
  CronLambdaPerms:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue
        'Fn::Sub': "tehBot-${EnvPrefix}CronLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CronLambdaTokenCleanupSchedule.Arn

  
  SharedOptionsLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: shared_options
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  AuthTokenPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: auth_token_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  
  QuotesGetLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_get
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  
  QuotesPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  QuotesSearchPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_search_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  QuoteNamePatchLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quote_name_patch
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  QuoteNameDeleteLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quote_name_delete
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  


  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt 
        - ApiGateway
        - RootResourceId
      PathPart: auth
  
  AuthTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref AuthResource
      PathPart: token
  
  AuthTokenMethods:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        ApiGateway: !Ref ApiGateway
        ApiResource: !Ref AuthTokenResource
        PostLambdaArn: !GetAtt AuthTokenPostLambdaStack.Outputs.LambdaArn
        OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  GuildsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt 
        - ApiGateway
        - RootResourceId
      PathPart: guilds

  GuildsGuildIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GuildsResource
      PathPart: "{guild_id}"

  GuildsGuildIdQuotesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GuildsGuildIdResource
      PathPart: quotes

  GuildsGuildIdQuotesMethods:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        ApiGateway: !Ref ApiGateway
        ApiResource: !Ref GuildsGuildIdQuotesResource
        GetLambdaArn: !GetAtt QuotesGetLambdaStack.Outputs.LambdaArn
        PostLambdaArn: !GetAtt QuotesPostLambdaStack.Outputs.LambdaArn
        OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  GuildsGuildIdQuotesSearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GuildsGuildIdQuotesResource
      PathPart: "search"
  
  GuildsGuildIdQuotesSearchMethods:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        ApiGateway: !Ref ApiGateway
        ApiResource: !Ref GuildsGuildIdQuotesSearchResource
        PostLambdaArn: !GetAtt QuotesSearchPostLambdaStack.Outputs.LambdaArn
        OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  GuildsGuildIdQuotesQuoteNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GuildsGuildIdQuotesResource
      PathPart: "{quote_name}"

  GuildsGuildIdQuotesQuoteNameMethods:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        ApiGateway: !Ref ApiGateway
        ApiResource: !Ref GuildsGuildIdQuotesQuoteNameResource
        DeleteLambdaArn: !GetAtt QuoteNameDeleteLambdaStack.Outputs.LambdaArn
        PatchLambdaArn: !GetAtt QuoteNamePatchLambdaStack.Outputs.LambdaArn
        OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # AuthTokenPostMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref AuthTokenResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
  #         - LambdaArn: !GetAtt AuthTokenPostLambdaStack.Outputs.LambdaArn
  
  # AuthTokenOptionsMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref AuthTokenResource
  #     HttpMethod: OPTIONS
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
  #         - LambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn


  DiscordInteractionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt 
        - ApiGateway
        - RootResourceId
      PathPart: discord-interactions
  
  DiscordInteractionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref DiscordInteractionsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !ImportValue
              'Fn::Sub': "tehBot-${EnvPrefix}WebhookLambdaArn"
    DependsOn: DiscordInteractionsLambdaPermission
  
  DiscordInteractionsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue
          'Fn::Sub': "tehBot-${EnvPrefix}WebhookLambdaArn"
      Principal: apigateway.amazonaws.com

  ApiGatewayLoggingRole:
    Condition: Prod
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayCloudwatchLogsAccount:
    Condition: Prod
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayLoggingRole
        - Arn