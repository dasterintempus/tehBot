---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  EnvPrefix:
    Type: String
    Default: ""
  CertificateArn:
    Type: String
  HostedZoneName:
    Type: String
  LambdaVersion:
    Type: String
  RootDiscordUserId:
    Type: String

Conditions:
  Nonprod: !Not [ !Equals [ !Ref EnvPrefix, "" ] ]
  Prod: !Equals [ !Ref EnvPrefix, "" ]

Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: 3.0.3
        info:
          title: !Sub "tehbot-${EnvPrefix}Api"
          description: |-
            TBD
          contact:
            email: DasterinTempus@outlook.com
          license:
            name: MIT
            url: https://mit-license.org/
          version: 0.1.0
        tags:
          - name: quotes
            description: Management and searching of Quotes
          - name: auth
            description: Auth token operations
          - name: webhook
            description: Webhook receivers for other services
        x-amazon-apigateway-cors:
          allowOrigins:
            - !If
              - Prod
              - !Sub "https://teh.${HostedZoneName}"
              - !Sub "https://dev-teh.${HostedZoneName}"
          allowCredentials: true
          exposeHeaders:
            - "x-teh-auth"
            - "content-type"
          allowHeaders:
            - "x-teh-auth"
            - "content-type"
          allowMethods:
            - GET
            - POST
            - PATCH
            - DELETE
          maxAge: 3600
        paths:
          /discord-interactions:
            post:
              tags:
                - webhook
              responses:
                '200':
                  description: Successful operation
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/DiscordInteractionresponse"
                '400':
                  description: Failed operation
                '401':
                  description: Unauthorized operation
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:tehBot-${EnvPrefix}-discord-webhook/invocations
                httpMethod: "POST"
                type: "aws_proxy"
          /guilds/{guild_id}/quotes:
            get:
              parameters:
                - name: guild_id
                  in: path
                  description: Guild ID
                  required: true
                  schema:
                    type: string
              tags:
                - quotes
              summary: Get all quotes.
              description: Get all quotes for this guild. See /guilds/{guild_id}/quotes/search for searching.
              operationId: getQuotes
              responses:
                '200':
                  description: Successful operation
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/Quote"
                '400':
                  description: Payload Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '401':
                  description: Token Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '403':
                  description: Authentication Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:tehBot-${EnvPrefix}-quotes_get/invocations
                httpMethod: "POST"
                type: "aws_proxy"
              security:
               - token_auth: []
            post:
              parameters:
                - name: guild_id
                  in: path
                  description: Guild ID
                  required: true
                  schema:
                    type: string
              tags:
                - quotes
              summary: Add a new quote.
              description: Create a new quote for this guild.
              operationId: postQuote
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Quote"
              responses:
                '200':
                  description: Successful operation
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          success:
                            type: boolean
                          quote:
                            $ref: "#/components/schemas/Quote"
                '400':
                  description: Payload Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '401':
                  description: Token Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '403':
                  description: Authentication Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:tehBot-${EnvPrefix}-quotes_post/invocations
                httpMethod: "POST"
                type: "aws_proxy"
              security:
               - token_auth: []
          /auth/token:
            post:
              tags:
                - auth
              summary: Request an auth token
              description: Request a tehBot auth token via Discord OAuth callback
              operationId: authToken
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/AuthTokenRequest"
                required: true
              responses:
                '200':
                  description: Successful operation
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/AuthTokenResponse"
                '400':
                  description: Payload Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '403':
                  description: Authentication Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
                '500':
                  description: Processing Error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/APIError"
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:tehBot-${EnvPrefix}-auth_token_post/invocations
                httpMethod: "POST"
                passthroughBehavior: "when_no_templates"
                payloadFormatVersion: 1.0
                type: "aws_proxy"
                
        components:
          schemas:
            AuthTokenRequest:
              type: object
              properties:
                code:
                  type: string
              example:
                code: "discord_oauth_callback_value"
            AuthTokenResponse:
              type: object
              properties:
                token:
                  type: string
                  description: "The tehBoth auth token."
                user_display_name:
                  type: string
                  description: "Discord display name for this User."
                user_avatar:
                  type: string
                  description: "Discord CDN url for User's avatar."
                guilds:
                  type: array
                  description: "An array of Guilds that this User is authenticated for."
                  items:
                    $ref: '#/components/schemas/Guild'
            Guild:
              type: object
              properties:
                id:
                  type: string
                  description: "The Discord API identifier for the Guild"
                name:
                  type: string
                  description: "The name of the Guild"
                icon:
                  type: string
                  description: "Discord CDN url for Guilds's icon"
            Quote:
              type: object
              properties:
                name:
                  type: string
                  description: "The name of the quote"
                tags:
                  type: array
                  items:
                    type: string
                  description: "A list of tags"
                url:
                  type: string
                  description: "URL of the quote image"
            APIError:
              type: object
              properties:
                error:
                  type: object
                  properties:
                    code:
                      type: string
                      description: "An error code string."
                    msg:
                      type: string
                      description: "A user-friendly error message."
            DiscordInteractionresponse:
              type: object
              properties:
                type:
                  type: integer
                data:
                  type: object
                  properties:
                    content:
                      type: string
          securitySchemes:
            token_auth:
              type: apiKey
              in: header
              name: x-tehbot-auth
              x-amazon-apigateway-authorizer:
                type: request
                enableSimpleResponses: true
                authorizerPayloadFormatVersion: "2.0"
                authorizerResultTtlInSeconds: 300
                identitySource: $request.header.x-tehbot-auth
                authorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:tehBot-${EnvPrefix}-auth_token_validate/invocations
          # x-amazon-api-gateway-integrations:
          #   auth_token_post:
              
    DependsOn:
      - AuthTokenPostLambdaStack
      - QuotesGetLambdaStack
      - QuotesPostLambdaStack

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref ApiGateway
      AutoDeploy: true

  ApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}"
        - !Sub api.${HostedZoneName}
      DomainNameConfigurations:
        - EndpointType: Regional
          CertificateArn: !Ref CertificateArn
          CertificateName: apiCert

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}"
        - !Sub api.${HostedZoneName}
      ApiId: !Ref ApiGateway
      Stage: !Ref ApiStage

  # ApiDomainName:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     DomainName: !If
  #       - Nonprod
  #       - !Sub "${EnvPrefix}-api.${HostedZoneName}"
  #       - !Sub api.${HostedZoneName}
  #     RegionalCertificateArn: !Ref CertificateArn
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL
  
  ApiR53Entry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !If
        - Nonprod
        - !Sub "${EnvPrefix}-api.${HostedZoneName}."
        - !Sub api.${HostedZoneName}.
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId

  # ApiDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     StageName: live
  #   DependsOn: DiscordInteractionsMethod

  # ApiBaseNameMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     BasePath: "tehbot"
  #     DomainName: !Ref ApiDomainName
  #     RestApiId: !Ref ApiGateway
  #     Stage: live
  #   DependsOn:
  #     - ApiDeployment
  #     - ApiR53Entry

  CronLambdaTokenCleanupSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "ScheduleRule for token_cleanup (${EnvPrefix})"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets: 
        - Arn: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}CronLambdaArn"
          Id: "token_cleanup"
          Input: |
            {
              "op": "token_cleanup"
            }
  CronLambdaPerms:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue
        'Fn::Sub': "tehBot-${EnvPrefix}CronLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CronLambdaTokenCleanupSchedule.Arn

  
  # SharedOptionsLambdaStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub
  #       - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
  #       - LambdaBucket: !ImportValue
  #           'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
  #         LambdaVersion: !Ref LambdaVersion
  #     Parameters:
  #       EnvPrefix: !Ref EnvPrefix
  #       Version: !Ref LambdaVersion
  #       Name: shared_options
  #       RootDiscordUserId: !Ref RootDiscordUserId
  #       HostedZoneName: !Ref HostedZoneName
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete

  AuthTokenPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: auth_token_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  
  QuotesGetLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_get
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  
  QuotesPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  QuotesSearchPostLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quotes_search_post
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  QuoteNamePatchLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quote_name_patch
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete


  QuoteNameDeleteLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${LambdaBucket}/apilambda_cft_${LambdaVersion}.yml"
        - LambdaBucket: !ImportValue
            'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
          LambdaVersion: !Ref LambdaVersion
      Parameters:
        EnvPrefix: !Ref EnvPrefix
        Version: !Ref LambdaVersion
        Name: quote_name_delete
        RootDiscordUserId: !Ref RootDiscordUserId
        HostedZoneName: !Ref HostedZoneName
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  


  # AuthResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !GetAtt 
  #       - ApiGateway
  #       - RootResourceId
  #     PathPart: auth
  
  # AuthTokenResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !Ref AuthResource
  #     PathPart: token
  
  # AuthTokenMethods:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub
  #       - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
  #       - LambdaBucket: !ImportValue
  #           'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
  #         LambdaVersion: !Ref LambdaVersion
  #     Parameters:
  #       ApiGateway: !Ref ApiGateway
  #       ApiResource: !Ref AuthTokenResource
  #       PostLambdaArn: !GetAtt AuthTokenPostLambdaStack.Outputs.LambdaArn
  #       #OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete

  # GuildsResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !GetAtt 
  #       - ApiGateway
  #       - RootResourceId
  #     PathPart: guilds

  # GuildsGuildIdResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !Ref GuildsResource
  #     PathPart: "{guild_id}"

  # GuildsGuildIdQuotesResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !Ref GuildsGuildIdResource
  #     PathPart: quotes

  # GuildsGuildIdQuotesMethods:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub
  #       - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
  #       - LambdaBucket: !ImportValue
  #           'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
  #         LambdaVersion: !Ref LambdaVersion
  #     Parameters:
  #       ApiGateway: !Ref ApiGateway
  #       ApiResource: !Ref GuildsGuildIdQuotesResource
  #       GetLambdaArn: !GetAtt QuotesGetLambdaStack.Outputs.LambdaArn
  #       PostLambdaArn: !GetAtt QuotesPostLambdaStack.Outputs.LambdaArn
  #       #OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete

  # GuildsGuildIdQuotesSearchResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !Ref GuildsGuildIdQuotesResource
  #     PathPart: "search"
  
  # GuildsGuildIdQuotesSearchMethods:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub
  #       - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
  #       - LambdaBucket: !ImportValue
  #           'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
  #         LambdaVersion: !Ref LambdaVersion
  #     Parameters:
  #       ApiGateway: !Ref ApiGateway
  #       ApiResource: !Ref GuildsGuildIdQuotesSearchResource
  #       PostLambdaArn: !GetAtt QuotesSearchPostLambdaStack.Outputs.LambdaArn
  #       #OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete


  # GuildsGuildIdQuotesQuoteNameResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !Ref GuildsGuildIdQuotesResource
  #     PathPart: "{quote_name}"

  # GuildsGuildIdQuotesQuoteNameMethods:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub
  #       - "https://s3.amazonaws.com/${LambdaBucket}/apimethod_cft_${LambdaVersion}.yml"
  #       - LambdaBucket: !ImportValue
  #           'Fn::Sub': "tehBot-${EnvPrefix}LambdaBucket"
  #         LambdaVersion: !Ref LambdaVersion
  #     Parameters:
  #       ApiGateway: !Ref ApiGateway
  #       ApiResource: !Ref GuildsGuildIdQuotesQuoteNameResource
  #       DeleteLambdaArn: !GetAtt QuoteNameDeleteLambdaStack.Outputs.LambdaArn
  #       PatchLambdaArn: !GetAtt QuoteNamePatchLambdaStack.Outputs.LambdaArn
  #       #OptionsLambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete

  # AuthTokenPostMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref AuthTokenResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
  #         - LambdaArn: !GetAtt AuthTokenPostLambdaStack.Outputs.LambdaArn
  
  # AuthTokenOptionsMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref AuthTokenResource
  #     HttpMethod: OPTIONS
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
  #         - LambdaArn: !GetAtt SharedOptionsLambdaStack.Outputs.LambdaArn


  # DiscordInteractionsResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ParentId: !GetAtt 
  #       - ApiGateway
  #       - RootResourceId
  #     PathPart: discord-interactions
  
  # DiscordInteractionsMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref DiscordInteractionsResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
  #         - LambdaArn: !ImportValue
  #             'Fn::Sub': "tehBot-${EnvPrefix}WebhookLambdaArn"
  #   DependsOn: DiscordInteractionsLambdaPermission
  
  DiscordInteractionsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !ImportValue
          'Fn::Sub': "tehBot-${EnvPrefix}WebhookLambdaArn"
      Principal: apigateway.amazonaws.com

  ApiGatewayLoggingRole:
    Condition: Prod
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayCloudwatchLogsAccount:
    Condition: Prod
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayLoggingRole
        - Arn